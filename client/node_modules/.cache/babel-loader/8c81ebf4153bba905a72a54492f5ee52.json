{"ast":null,"code":"import { AUTH_USER, AUTH_ERROR, COL_ADD_PLANT, COL_REMOVE_PLANT } from './types';\nimport axios from 'axios'; // REFACTORING SIGNUP\n\nlet decodeToken = token => {\n  let split_token = token.split('.');\n  let token_payload = split_token[1];\n  let decoded_token_string = atob(token_payload);\n  let decoded_token = JSON.parse(decoded_token_string);\n  localStorage.setItem('user_id', decoded_token.sub);\n  localStorage.setItem('user_name', decoded_token);\n  console.log(\"local storage user ID: \".concat(localStorage.user_id));\n};\n\nexport const signup = (formProps, callback) => async dispatch => {\n  try {\n    let response = await axios.post('/signup', formProps);\n    console.log(response); //dispatch\n\n    dispatch({\n      type: AUTH_USER,\n      payload: response.data.token\n    });\n    localStorage.setItem('token', response.data.token);\n    decodeToken(response.data.token);\n    callback();\n  } catch (e) {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'That email is already in use...'\n    });\n  }\n};\nexport const signin = (formProps, callback) => async dispatch => {\n  try {\n    let response = await axios.post('/signin', formProps);\n    dispatch({\n      type: AUTH_USER,\n      payload: response.data.token\n    });\n    localStorage.setItem('token', response.data.token);\n    decodeToken(response.data.token);\n    callback();\n  } catch (e) {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'The email or password is incorrect...'\n    });\n  }\n};\nexport const signout = () => {\n  localStorage.removeItem('token');\n  return {\n    type: AUTH_USER,\n    payload: ''\n  };\n}; //Add/remove from collection:\n\nexport const addToCollectionDb = plant => async dispatch => {\n  // try{\n  console.log(\"indide addtocollectionDB plant ID \".concat(plant.id));\n  let response = await axios.post('/collection', {\n    plant_id: plant.id,\n    user_id: localStorage.user_id\n  });\n  console.log(\"add to collection axios response: \".concat(response)); //dispatch\n\n  dispatch({\n    type: COL_ADD_PLANT,\n    payload: plant\n  });\n  localStorage.setItem('plant_id', response.data.plant_id);\n  console.log(\"after setItem localstorage \".concat(response.data.plant_id)); // }\n  // catch(e){\n  //     dispatch({type: COL_ADD_PLANT, payload: 'That plant is already in collection...'})\n  // }\n};","map":{"version":3,"sources":["/Users/tarekalbeb/Desktop/untitled folder/client/src/actions/index.js"],"names":["AUTH_USER","AUTH_ERROR","COL_ADD_PLANT","COL_REMOVE_PLANT","axios","decodeToken","token","split_token","split","token_payload","decoded_token_string","atob","decoded_token","JSON","parse","localStorage","setItem","sub","console","log","user_id","signup","formProps","callback","dispatch","response","post","type","payload","data","e","signin","signout","removeItem","addToCollectionDb","plant","id","plant_id"],"mappings":"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","sourcesContent":["import { AUTH_USER, AUTH_ERROR, COL_ADD_PLANT, COL_REMOVE_PLANT} from './types';\nimport axios from 'axios';\n\n\n// REFACTORING SIGNUP\n\nlet decodeToken = (token)=>{\n    let split_token = token.split('.')\n    let token_payload = split_token[1];\n    let decoded_token_string = atob(token_payload);\n    let decoded_token = JSON.parse(decoded_token_string)\n    localStorage.setItem('user_id', decoded_token.sub);\n    localStorage.setItem('user_name', decoded_token)\n    console.log(`local storage user ID: ${localStorage.user_id}`)\n}\n\nexport const signup = (formProps, callback) => async dispatch =>{\n\n    try{\n        let response = await axios.post('/signup', formProps);\n\n        console.log(response)\n\n        //dispatch\n\n        dispatch({type: AUTH_USER, payload: response.data.token});\n\n        localStorage.setItem('token', response.data.token);\n        decodeToken(response.data.token)\n        callback();\n    }\n    catch(e){\n        dispatch({type: AUTH_ERROR, payload: 'That email is already in use...'})\n    }\n};\n\nexport const signin = (formProps, callback) => async dispatch => {\n\n    try {\n        let response = await axios.post('/signin', formProps);\n        \n        dispatch({type: AUTH_USER, payload: response.data.token});\n\n        localStorage.setItem('token', response.data.token);\n        decodeToken(response.data.token)\n        callback();\n    }\n    catch(e){\n        dispatch({type: AUTH_ERROR, payload: 'The email or password is incorrect...'})\n    }\n\n}\n\nexport const signout = () => {\n\n    localStorage.removeItem('token')\n    return {\n        type: AUTH_USER,\n        payload: ''\n    }\n}\n\n//Add/remove from collection:\nexport const addToCollectionDb = (plant) => async dispatch =>{\n\n    // try{\n        console.log(`indide addtocollectionDB plant ID ${plant.id}`)\n        let response = await axios.post('/collection', \n        {plant_id : plant.id, user_id: localStorage.user_id})\n\n        console.log(`add to collection axios response: ${response}`)\n\n        //dispatch\n\n        dispatch({type: COL_ADD_PLANT, \n            payload: plant});\n\n        localStorage.setItem('plant_id', response.data.plant_id);\n        console.log(`after setItem localstorage ${response.data.plant_id}`)\n    // }\n    // catch(e){\n    //     dispatch({type: COL_ADD_PLANT, payload: 'That plant is already in collection...'})\n    // }\n};\n"]},"metadata":{},"sourceType":"module"}