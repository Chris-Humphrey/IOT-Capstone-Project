{"ast":null,"code":"import _objectSpread from \"/Users/volleyball_chik_100/DigitalCrafts/Projects/IOT-Practice-2/gardenia2/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { COL_ADD_PLANT, COL_REMOVE_PLANT, COL_DISPLAY_PLANT } from '../actions/types';\nconst Initial_State = {\n  collist: [],\n  dbCollection: []\n};\n\nlet collectionReducer = (state = Initial_State, action) => {\n  switch (action.type) {\n    case COL_ADD_PLANT:\n      console.log(action.payload);\n      return _objectSpread({}, state, {\n        collection: state.collection.concat(action.payload)\n      });\n\n    case COL_DISPLAY_PLANT:\n      console.log(\"Col list reducer display case\");\n      console.log(action.payload);\n      return _objectSpread({}, state, {\n        dbCollection: state.dbCollection.concat(action.payload)\n      });\n\n    case COL_REMOVE_PLANT:\n      console.log(\"inside Collection remove reducer \".concat(action.payload));\n      let newCollection = state.collection.filter(plant => {\n        return plant.name !== action.payload.name;\n      });\n      return _objectSpread({}, state, {\n        collection: newCollection\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default collectionReducer;","map":{"version":3,"sources":["/Users/volleyball_chik_100/DigitalCrafts/Projects/IOT-Practice-2/gardenia2/client/src/reducers/collectionReducer.js"],"names":["COL_ADD_PLANT","COL_REMOVE_PLANT","COL_DISPLAY_PLANT","Initial_State","collist","dbCollection","collectionReducer","state","action","type","console","log","payload","collection","concat","newCollection","filter","plant","name"],"mappings":";AAAA,SAAQA,aAAR,EAAuBC,gBAAvB,EAAyCC,iBAAzC,QAAiE,kBAAjE;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,EADS;AAElBC,EAAAA,YAAY,EAAE;AAFI,CAAtB;;AAKA,IAAIC,iBAAiB,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACIU,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,+BACOL,KADP;AAEIM,QAAAA,UAAU,EAAEN,KAAK,CAACM,UAAN,CAAiBC,MAAjB,CAAwBN,MAAM,CAACI,OAA/B;AAFhB;;AAIJ,SAAKV,iBAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,+BACOL,KADP;AAEIF,QAAAA,YAAY,EAAGE,KAAK,CAACF,YAAN,CAAmBS,MAAnB,CAA0BN,MAAM,CAACI,OAAjC;AAFnB;;AAIJ,SAAKX,gBAAL;AACIS,MAAAA,OAAO,CAACC,GAAR,4CAAgDH,MAAM,CAACI,OAAvD;AACA,UAAIG,aAAa,GAAGR,KAAK,CAACM,UAAN,CAAiBG,MAAjB,CAAyBC,KAAD,IAAS;AACrD,eAAOA,KAAK,CAACC,IAAN,KAAeV,MAAM,CAACI,OAAP,CAAeM,IAArC;AACC,OAFmB,CAApB;AAGJ,+BACOX,KADP;AAEIM,QAAAA,UAAU,EAAEE;AAFhB;;AAIJ;AACI,aAAOR,KAAP;AAxBJ;AA0BH,CA3BD;;AA6BA,eAAeD,iBAAf","sourcesContent":["import {COL_ADD_PLANT, COL_REMOVE_PLANT, COL_DISPLAY_PLANT} from '../actions/types';\n\nconst Initial_State = {\n    collist: [],\n    dbCollection: []\n}\n\nlet collectionReducer = (state = Initial_State, action) => {\n    switch (action.type){\n        case COL_ADD_PLANT:\n            console.log(action.payload)\n            return {\n                ...state,\n                collection: state.collection.concat(action.payload)\n            }\n        case COL_DISPLAY_PLANT: \n            console.log(`Col list reducer display case`)\n            console.log(action.payload)\n            return {\n                ...state,\n                dbCollection : state.dbCollection.concat(action.payload)\n            }\n        case COL_REMOVE_PLANT: \n            console.log(`inside Collection remove reducer ${action.payload}`)\n            let newCollection = state.collection.filter((plant)=>{\n            return plant.name !== action.payload.name\n            })\n        return  {\n            ...state,\n            collection: newCollection\n        }\n    default:\n        return state;\n    }\n}\n\nexport default collectionReducer;"]},"metadata":{},"sourceType":"module"}