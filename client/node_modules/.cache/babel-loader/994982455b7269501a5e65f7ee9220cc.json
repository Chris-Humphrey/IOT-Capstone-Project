{"ast":null,"code":"import _objectSpread from \"/Users/volleyball_chik_100/DigitalCrafts/Projects/IOT-Practice-2/gardenia2/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { COL_ADD_PLANT, COL_REMOVE_PLANT, DISPLAY_COL_ITEMS } from '../actions/types';\nconst Initial_State = {\n  collection: [],\n  addedToCollection: \"\",\n  addedToCollectionError: \"\"\n};\n\nlet collectionReducer = (state = Initial_State, action) => {\n  switch (action.type) {\n    case COL_ADD_PLANT:\n      console.log(\"inside of reducer \".concat(action.payload));\n      return _objectSpread({}, state, {\n        collection: state.collection.concat({\n          plant: action.payload\n        })\n      });\n\n    case DISPLAY_COL_ITEMS:\n      return _objectSpread({}, state, {\n        collection: state.collection.concat({\n          plant: action.payload\n        })\n      });\n\n    case COL_REMOVE_PLANT:\n      console.log(\"inside of col remove plant \".concat(action.payload));\n      let newCollection = state.collection.filter(plant => {\n        return plant.name !== action.payload.name;\n      });\n      return _objectSpread({}, state, {\n        collection: newCollection\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default collectionReducer;","map":{"version":3,"sources":["/Users/volleyball_chik_100/DigitalCrafts/Projects/IOT-Practice-2/gardenia2/client/src/reducers/collectionReducer.js"],"names":["COL_ADD_PLANT","COL_REMOVE_PLANT","DISPLAY_COL_ITEMS","Initial_State","collection","addedToCollection","addedToCollectionError","collectionReducer","state","action","type","console","log","payload","concat","plant","newCollection","filter","name"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,gBAAxB,EAA0CC,iBAA1C,QAAkE,kBAAlE;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,EADM;AAElBC,EAAAA,iBAAiB,EAAE,EAFD;AAGlBC,EAAAA,sBAAsB,EAAE;AAHN,CAAtB;;AAMA,IAAIC,iBAAiB,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AAGvD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,aAAL;AACIW,MAAAA,OAAO,CAACC,GAAR,6BAAiCH,MAAM,CAACI,OAAxC;AACA,+BACOL,KADP;AAEIJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,CAAiBU,MAAjB,CAAwB;AAChCC,UAAAA,KAAK,EAAEN,MAAM,CAACI;AADkB,SAAxB;AAFhB;;AAMJ,SAAKX,iBAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,CAAiBU,MAAjB,CAAwB;AAChCC,UAAAA,KAAK,EAAEN,MAAM,CAACI;AADkB,SAAxB;AAFhB;;AAOJ,SAAKZ,gBAAL;AAEIU,MAAAA,OAAO,CAACC,GAAR,sCAA0CH,MAAM,CAACI,OAAjD;AAEA,UAAIG,aAAa,GAAGR,KAAK,CAACJ,UAAN,CAAiBa,MAAjB,CAAyBF,KAAD,IAAS;AACjD,eAAOA,KAAK,CAACG,IAAN,KAAeT,MAAM,CAACI,OAAP,CAAeK,IAArC;AACC,OAFe,CAApB;AAGA,+BACOV,KADP;AAEIJ,QAAAA,UAAU,EAAEY;AAFhB;;AAIJ;AACI,aAAOR,KAAP;AA7BR;AA+BH,CAlCD;;AAoCA,eAAeD,iBAAf","sourcesContent":["import { COL_ADD_PLANT, COL_REMOVE_PLANT, DISPLAY_COL_ITEMS} from '../actions/types';\n\nconst Initial_State = {\n    collection: [],\n    addedToCollection: \"\",\n    addedToCollectionError: \"\"\n}\n\nlet collectionReducer = (state = Initial_State, action) => {\n  \n    \n    switch(action.type){\n        case COL_ADD_PLANT:\n            console.log(`inside of reducer ${action.payload}`)\n            return {\n                ...state,\n                collection: state.collection.concat({\n                    plant: action.payload\n                })\n            }\n        case DISPLAY_COL_ITEMS:\n            return {\n                ...state,\n                collection: state.collection.concat({\n                    plant: action.payload\n                })\n            }\n            \n        case COL_REMOVE_PLANT:\n\n            console.log(`inside of col remove plant ${action.payload}`)\n\n            let newCollection = state.collection.filter((plant)=>{\n                return plant.name !== action.payload.name\n                })\n            return  {\n                ...state,\n                collection: newCollection\n            }\n        default:\n            return state;\n    }\n}\n\nexport default collectionReducer;"]},"metadata":{},"sourceType":"module"}