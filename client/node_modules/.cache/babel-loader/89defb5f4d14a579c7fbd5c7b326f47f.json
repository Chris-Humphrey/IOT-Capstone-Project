{"ast":null,"code":"import { AUTH_USER, AUTH_ERROR, AUTH_SIGNOUT, COL_ADD_PLANT, DISPLAY_COL_ITEMS, COL_REMOVE_PLANT, WISH_ADD_PLANT } from './types';\nimport axios from 'axios'; // REFACTORING SIGNUP\n\nlet decodeToken = token => {\n  let split_token = token.split('.');\n  let token_payload = split_token[1];\n  let decoded_token_string = atob(token_payload);\n  let decoded_token = JSON.parse(decoded_token_string); // localStorage.setItem('user_id', decoded_token.sub);\n\n  localStorage.setItem('user_name', decoded_token.user_name); // console.log(`local storage user ID: ${localStorage.user_id}`)\n  // console.log(`local Storage user name: ${localStorage.user_name}`)\n};\n\nexport const signup = (formProps, callback) => async dispatch => {\n  try {\n    let response = await axios.post('/signup', formProps);\n    decodeToken(response.data.token); //dispatch\n\n    dispatch({\n      type: AUTH_USER,\n      payload: response.data.token,\n      isLoggedIn: true,\n      username: formProps.username\n    });\n    localStorage.setItem('token', response.data.token);\n    callback();\n  } catch (e) {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'That email is already in use...'\n    });\n  }\n};\nexport const signin = (formProps, callback) => async dispatch => {\n  try {\n    let response = await axios.post('/signin', formProps);\n    decodeToken(response.data.token);\n    console.log('signin form props');\n    console.log(localStorage.user_name);\n    dispatch({\n      type: AUTH_USER,\n      payload: response.data.token,\n      isLoggedIn: true,\n      username: localStorage.user_name\n    });\n    localStorage.setItem('token', response.data.token);\n    callback();\n  } catch (e) {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'The email or password is incorrect...'\n    });\n  }\n};\nexport const signout = () => {\n  localStorage.clear();\n  return {\n    type: AUTH_SIGNOUT,\n    payload: '',\n    isLoggedIn: false\n  };\n}; //Add/remove from collection:\n\nexport const addToCollectionDb = plant => async dispatch => {\n  // try{\n  // console.log(`indide addtocollectionDB plant ID ${plant.item.id}`)\n  let response = await axios.post('/colAdd', {\n    plant_id: plant.id,\n    user_id: localStorage.user_id\n  });\n  console.log(\"add to collection axios response: \".concat(response)); //dispatch\n\n  dispatch({\n    type: COL_ADD_PLANT,\n    payload: plant\n  });\n  localStorage.setItem('plant_id', response.data.plant_id);\n  console.log(\"after setItem localstorage \".concat(response.data.plant_id));\n};\nexport const displayCollectionDb = () => async dispatch => {\n  let response = await axios.post('/collection', {\n    user_id: localStorage.user_id\n  });\n  console.log('response');\n  console.log(response.data);\n  dispatch({\n    type: DISPLAY_COL_ITEMS,\n    payload: response.data\n  });\n};\nexport const removeFromCollectionDb = plant => async dispatch => {\n  let response = await axios.post('/colRemove', {\n    user_id: localStorage.user_id,\n    plant_id: plant.renderPlant.plant_id\n  });\n  console.log('action');\n  console.log(plant.renderPlant);\n  dispatch({\n    type: COL_REMOVE_PLANT,\n    payload: plant.renderPlant\n  }); // localStorage.removeItem('plant_id')\n};\nexport const addToWishlistDb = plant => async dispatch => {\n  let response = await axios.post('/wishAdd', {\n    user_id: localStorage.user_id,\n    plant_id: plant.id\n  });\n  console.log(\"add wishlist axios response \".concat(response));\n  console.log(\"payload plant.item \".concat(plant.name));\n  dispatch({\n    type: WISH_ADD_PLANT,\n    payload: plant\n  });\n};","map":{"version":3,"sources":["/Users/volleyball_chik_100/DigitalCrafts/Projects/IOT-Practice-2/gardenia2/client/src/actions/index.js"],"names":["AUTH_USER","AUTH_ERROR","AUTH_SIGNOUT","COL_ADD_PLANT","DISPLAY_COL_ITEMS","COL_REMOVE_PLANT","WISH_ADD_PLANT","axios","decodeToken","token","split_token","split","token_payload","decoded_token_string","atob","decoded_token","JSON","parse","localStorage","setItem","user_name","signup","formProps","callback","dispatch","response","post","data","type","payload","isLoggedIn","username","e","signin","console","log","signout","clear","addToCollectionDb","plant","plant_id","id","user_id","displayCollectionDb","removeFromCollectionDb","renderPlant","addToWishlistDb","name"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,EAA8CC,aAA9C,EAA6DC,iBAA7D,EAAgFC,gBAAhF,EAAkGC,cAAlG,QAAuH,SAAvH;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AAEA,IAAIC,WAAW,GAAIC,KAAD,IAAS;AACvB,MAAIC,WAAW,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAlB;AACA,MAAIC,aAAa,GAAGF,WAAW,CAAC,CAAD,CAA/B;AACA,MAAIG,oBAAoB,GAAGC,IAAI,CAACF,aAAD,CAA/B;AACA,MAAIG,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWJ,oBAAX,CAApB,CAJuB,CAKvB;;AACAK,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCJ,aAAa,CAACK,SAAhD,EANuB,CAOvB;AACA;AACH,CATD;;AAWA,OAAO,MAAMC,MAAM,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB,MAAMC,QAAN,IAAiB;AAE5D,MAAG;AACC,QAAIC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,SAAX,EAAsBJ,SAAtB,CAArB;AACAd,IAAAA,WAAW,CAACiB,QAAQ,CAACE,IAAT,CAAclB,KAAf,CAAX,CAFD,CAIC;;AAEAe,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAE5B,SAAP;AAAkB6B,MAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAclB,KAAzC;AAAgDqB,MAAAA,UAAU,EAAE,IAA5D;AAAkEC,MAAAA,QAAQ,EAAET,SAAS,CAACS;AAAtF,KAAD,CAAR;AACAb,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BM,QAAQ,CAACE,IAAT,CAAclB,KAA5C;AACAc,IAAAA,QAAQ;AACX,GATD,CAUA,OAAMS,CAAN,EAAQ;AACJR,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAE3B,UAAP;AAAmB4B,MAAAA,OAAO,EAAE;AAA5B,KAAD,CAAR;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMI,MAAM,GAAG,CAACX,SAAD,EAAYC,QAAZ,KAAyB,MAAMC,QAAN,IAAkB;AAE7D,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,SAAX,EAAsBJ,SAAtB,CAArB;AACAd,IAAAA,WAAW,CAACiB,QAAQ,CAACE,IAAT,CAAclB,KAAf,CAAX;AAEAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYjB,YAAY,CAACE,SAAzB;AAEAI,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAE5B,SAAP;AAAkB6B,MAAAA,OAAO,EAAEJ,QAAQ,CAACE,IAAT,CAAclB,KAAzC;AAAgDqB,MAAAA,UAAU,EAAE,IAA5D;AAAkEC,MAAAA,QAAQ,EAAEb,YAAY,CAACE;AAAzF,KAAD,CAAR;AAEAF,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BM,QAAQ,CAACE,IAAT,CAAclB,KAA5C;AACAc,IAAAA,QAAQ;AACX,GAXD,CAYA,OAAMS,CAAN,EAAQ;AACJR,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAE3B,UAAP;AAAmB4B,MAAAA,OAAO,EAAE;AAA5B,KAAD,CAAR;AACH;AAEJ,CAlBM;AAoBP,OAAO,MAAMO,OAAO,GAAG,MAAM;AAEzBlB,EAAAA,YAAY,CAACmB,KAAb;AACA,SAAO;AACHT,IAAAA,IAAI,EAAE1B,YADH;AAEH2B,IAAAA,OAAO,EAAE,EAFN;AAGHC,IAAAA,UAAU,EAAE;AAHT,GAAP;AAKH,CARM,C,CAUP;;AACA,OAAO,MAAMQ,iBAAiB,GAAIC,KAAD,IAAW,MAAMf,QAAN,IAAiB;AAEzD;AACI;AACA,MAAIC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,SAAX,EACrB;AAACc,IAAAA,QAAQ,EAAGD,KAAK,CAACE,EAAlB;AAAsBC,IAAAA,OAAO,EAAExB,YAAY,CAACwB;AAA5C,GADqB,CAArB;AAGJR,EAAAA,OAAO,CAACC,GAAR,6CAAiDV,QAAjD,GAPyD,CASzD;;AAEAD,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAEzB,aAAP;AACL0B,IAAAA,OAAO,EAAEU;AADJ,GAAD,CAAR;AAGArB,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCM,QAAQ,CAACE,IAAT,CAAca,QAA/C;AACAN,EAAAA,OAAO,CAACC,GAAR,sCAA0CV,QAAQ,CAACE,IAAT,CAAca,QAAxD;AACH,CAhBM;AAkBP,OAAO,MAAMG,mBAAmB,GAAG,MAAM,MAAMnB,QAAN,IAAkB;AACvD,MAAIC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,aAAX,EAA0B;AAACgB,IAAAA,OAAO,EAAExB,YAAY,CAACwB;AAAvB,GAA1B,CAArB;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACE,IAArB;AACAH,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAExB,iBAAP;AAA0ByB,IAAAA,OAAO,EAAEJ,QAAQ,CAACE;AAA5C,GAAD,CAAR;AACH,CALM;AAOP,OAAO,MAAMiB,sBAAsB,GAAIL,KAAD,IAAW,MAAMf,QAAN,IAAkB;AAE/D,MAAIC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,YAAX,EAAyB;AAACgB,IAAAA,OAAO,EAAExB,YAAY,CAACwB,OAAvB;AAAgCF,IAAAA,QAAQ,EAAED,KAAK,CAACM,WAAN,CAAkBL;AAA5D,GAAzB,CAArB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACM,WAAlB;AACArB,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAEvB,gBAAP;AAAyBwB,IAAAA,OAAO,EAAEU,KAAK,CAACM;AAAxC,GAAD,CAAR,CAL+D,CAM/D;AACH,CAPM;AASP,OAAO,MAAMC,eAAe,GAAIP,KAAD,IAAW,MAAMf,QAAN,IAAkB;AACxD,MAAIC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,UAAX,EAAuB;AAACgB,IAAAA,OAAO,EAAExB,YAAY,CAACwB,OAAvB;AAAgCF,IAAAA,QAAQ,EAAED,KAAK,CAACE;AAAhD,GAAvB,CAArB;AACAP,EAAAA,OAAO,CAACC,GAAR,uCAA2CV,QAA3C;AACAS,EAAAA,OAAO,CAACC,GAAR,8BAAkCI,KAAK,CAACQ,IAAxC;AACAvB,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,IAAAA,OAAO,EAAEU;AAAhC,GAAD,CAAR;AACH,CALM","sourcesContent":["import { AUTH_USER, AUTH_ERROR, AUTH_SIGNOUT, COL_ADD_PLANT, DISPLAY_COL_ITEMS, COL_REMOVE_PLANT, WISH_ADD_PLANT} from './types';\nimport axios from 'axios';\n\n\n// REFACTORING SIGNUP\n\nlet decodeToken = (token)=>{\n    let split_token = token.split('.')\n    let token_payload = split_token[1];\n    let decoded_token_string = atob(token_payload);\n    let decoded_token = JSON.parse(decoded_token_string)\n    // localStorage.setItem('user_id', decoded_token.sub);\n    localStorage.setItem('user_name', decoded_token.user_name)\n    // console.log(`local storage user ID: ${localStorage.user_id}`)\n    // console.log(`local Storage user name: ${localStorage.user_name}`)\n}\n\nexport const signup = (formProps, callback) => async dispatch =>{\n\n    try{\n        let response = await axios.post('/signup', formProps);\n        decodeToken(response.data.token)\n\n        //dispatch\n\n        dispatch({type: AUTH_USER, payload: response.data.token, isLoggedIn: true, username: formProps.username});\n        localStorage.setItem('token', response.data.token);\n        callback();\n    }\n    catch(e){\n        dispatch({type: AUTH_ERROR, payload: 'That email is already in use...'})\n    }\n};\n\nexport const signin = (formProps, callback) => async dispatch => {\n\n    try {\n        let response = await axios.post('/signin', formProps);\n        decodeToken(response.data.token)\n\n        console.log('signin form props')\n        console.log(localStorage.user_name)\n        \n        dispatch({type: AUTH_USER, payload: response.data.token, isLoggedIn: true, username: localStorage.user_name});\n\n        localStorage.setItem('token', response.data.token);\n        callback();\n    }\n    catch(e){\n        dispatch({type: AUTH_ERROR, payload: 'The email or password is incorrect...'})\n    }\n\n}\n\nexport const signout = () => {\n\n    localStorage.clear()\n    return {\n        type: AUTH_SIGNOUT,\n        payload: '',\n        isLoggedIn: false\n    }\n}\n\n//Add/remove from collection:\nexport const addToCollectionDb = (plant) => async dispatch =>{\n\n    // try{\n        // console.log(`indide addtocollectionDB plant ID ${plant.item.id}`)\n        let response = await axios.post('/colAdd', \n        {plant_id : plant.id, user_id: localStorage.user_id})\n\n    console.log(`add to collection axios response: ${response}`)\n\n    //dispatch\n\n    dispatch({type: COL_ADD_PLANT, \n        payload: plant});\n\n    localStorage.setItem('plant_id', response.data.plant_id);\n    console.log(`after setItem localstorage ${response.data.plant_id}`) \n}\n\nexport const displayCollectionDb = () => async dispatch => {\n    let response = await axios.post('/collection', {user_id: localStorage.user_id})\n    console.log('response')\n    console.log(response.data)\n    dispatch({type: DISPLAY_COL_ITEMS, payload: response.data});\n}\n\nexport const removeFromCollectionDb = (plant) => async dispatch => {\n    \n    let response = await axios.post('/colRemove', {user_id: localStorage.user_id, plant_id: plant.renderPlant.plant_id})\n    console.log('action')\n    console.log(plant.renderPlant)\n    dispatch({type: COL_REMOVE_PLANT, payload: plant.renderPlant})\n    // localStorage.removeItem('plant_id')\n}\n\nexport const addToWishlistDb = (plant) => async dispatch => {\n    let response = await axios.post('/wishAdd', {user_id: localStorage.user_id, plant_id: plant.id})\n    console.log(`add wishlist axios response ${response}`)\n    console.log(`payload plant.item ${plant.name}`)\n    dispatch({type: WISH_ADD_PLANT, payload: plant})\n}\n\n\n"]},"metadata":{},"sourceType":"module"}