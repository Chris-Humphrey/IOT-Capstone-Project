{"ast":null,"code":"import _objectSpread from \"/Users/tarekalbeb/Desktop/untitled folder/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { COL_ADD_PLANT, COL_REMOVE_PLANT } from '../actions/types';\nconst Initial_State = {\n  collection: [],\n  addedToCollection: \"\",\n  addedToCollectionError: \"\"\n};\n\nlet collectionReducer = (state = Initial_State, action) => {\n  switch (action.type) {\n    case COL_ADD_PLANT:\n      let test = action.payload;\n      console.log(\"inside collection reducer: \".concat(test.name));\n      return _objectSpread({}, state, {\n        collection: state.collection.concat({\n          plant: action.payload\n        })\n      });\n\n    case DISPLAY_ITEMS:\n      return _objectSpread({}, state, {\n        collection: state.collection.map({\n          plant: action.playload\n        })\n      });\n\n    case COL_REMOVE_PLANT:\n      return _objectSpread({}, state, {\n        collection: state.collection.filter(plant => {\n          return plant.name !== action.plant.name;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default collectionReducer;","map":{"version":3,"sources":["/Users/tarekalbeb/Desktop/untitled folder/client/src/reducers/collectionReducer.js"],"names":["COL_ADD_PLANT","COL_REMOVE_PLANT","Initial_State","collection","addedToCollection","addedToCollectionError","collectionReducer","state","action","type","test","payload","console","log","name","concat","plant","DISPLAY_ITEMS","map","playload","filter"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,gBAAxB,QAAgD,kBAAhD;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,EADM;AAElBC,EAAAA,iBAAiB,EAAE,EAFD;AAGlBC,EAAAA,sBAAsB,EAAE;AAHN,CAAtB;;AAMA,IAAIC,iBAAiB,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AAGvD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AACI,UAAIU,IAAI,GAAGF,MAAM,CAACG,OAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,sCAA0CH,IAAI,CAACI,IAA/C;AACA,+BACOP,KADP;AAEIJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,CAAiBY,MAAjB,CAAwB;AAChCC,UAAAA,KAAK,EAAER,MAAM,CAACG;AADkB,SAAxB;AAFhB;;AAMJ,SAAKM,aAAL;AACI,+BACOV,KADP;AAEIJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,CAAiBe,GAAjB,CAAqB;AAC7BF,UAAAA,KAAK,EAAER,MAAM,CAACW;AADe,SAArB;AAFhB;;AAOJ,SAAKlB,gBAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,CAAiBiB,MAAjB,CAAyBJ,KAAD,IAAS;AACzC,iBAAOA,KAAK,CAACF,IAAN,KAAeN,MAAM,CAACQ,KAAP,CAAaF,IAAnC;AACC,SAFO;AAFhB;;AAMJ;AACI,aAAOP,KAAP;AA1BR;AA4BH,CA/BD;;AAiCA,eAAeD,iBAAf","sourcesContent":["import { COL_ADD_PLANT, COL_REMOVE_PLANT } from '../actions/types';\n\nconst Initial_State = {\n    collection: [],\n    addedToCollection: \"\",\n    addedToCollectionError: \"\"\n}\n\nlet collectionReducer = (state = Initial_State, action) => {\n  \n    \n    switch(action.type){\n        case COL_ADD_PLANT:\n            let test = action.payload;\n            console.log(`inside collection reducer: ${test.name}`)\n            return {\n                ...state,\n                collection: state.collection.concat({\n                    plant: action.payload\n                })\n            }\n        case DISPLAY_ITEMS:\n            return {\n                ...state,\n                collection: state.collection.map({\n                    plant: action.playload\n                })\n            }\n            \n        case COL_REMOVE_PLANT:\n            return  {\n                ...state,\n                collection: state.collection.filter((plant)=>{\n                    return plant.name !== action.plant.name\n                    })\n            }\n        default:\n            return state;\n    }\n}\n\nexport default collectionReducer;"]},"metadata":{},"sourceType":"module"}